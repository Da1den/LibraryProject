package com.library.test;
import static org.junit.Assert.assertEquals;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;

import org.junit.Test;

import com.library.object.Book;
import com.library.object.CD;
import com.library.object.Movie;
import com.library.object.MovieGenre;
import com.library.object.MovieType;
import com.library.object.ObjectInformation;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'unrea' at '28.10.16 14:46' with Gradle 3.0
 *
 * @author unrea, @date 28.10.16 14:46
 */
public class LibraryTest {
	//	private static final String PERSISTENCE_UNIT_NAME = "derby-embedded-inmemory";

	private static final String PERSISTENCE_UNIT_NAME = "derby-network";

	private static EntityManagerFactory factory;

	final static org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(LibraryTest.class);

	@org.junit.BeforeClass
	public static void setup() {
		factory = Persistence.createEntityManagerFactory(PERSISTENCE_UNIT_NAME);
		
	}

	@Test
	public void testObjectInformation() {
		Book book = new Book();
		EntityManager entityManager = factory.createEntityManager();
		try {
			EntityTransaction transaction = entityManager.getTransaction();
			transaction.begin();
			try {
				entityManager.persist(book);
				transaction.commit();
			} finally {
				if (transaction.isActive())
					transaction.rollback();
			}
			Book reloaded = entityManager.find(Book.class, book.getId());
			assertEquals(book, reloaded);
		} finally {
			entityManager.close();
		}
	}

	@Test
	public void testExcistenceOfCD(){
		CD cd = new CD();
		
		EntityManager entityManager = factory.createEntityManager();
		try{
			EntityTransaction transaction = entityManager.getTransaction();
			transaction.begin();

			try{
				entityManager.persist(cd);
				transaction.commit();
			} finally{
				if(transaction.isActive()) transaction.rollback();
			}
			CD testCd = entityManager.find(CD.class, cd.getId());
			assertEquals(cd, testCd);
			
			
		} finally{
			entityManager.close();
		}
	}
	

	@Test
	public void testExcistenceOfMovie(){
		Movie movie = new Movie();
		movie.setType(MovieType.FULLHD);
		movie.setName("John Wick");
		movie.setDurationInMin(101);
		movie.setDisks(1);
		movie.setMovieGenre(MovieGenre.ACTION);
		EntityManager entityManager = factory.createEntityManager();
		try{
			EntityTransaction transaction = entityManager.getTransaction();
			transaction.begin();

			try{
				entityManager.persist(movie);
				transaction.commit();
			} finally{
				if(transaction.isActive()) transaction.rollback();
			}
			Movie testMovie = entityManager.find(Movie.class, movie.getId());
			assertEquals(movie, testMovie);
			
			@SuppressWarnings("unchecked")
			List<ObjectInformation> movies = entityManager.createQuery(
					"SELECT c FROM OBJECT_INFORMATION c WHERE c.name LIKE :custName")
				    .setParameter("custName", "John Wick")
				    .setMaxResults(10)
				    .getResultList();
			
			for(ObjectInformation obj : movies){
				System.out.println(obj.getName());
			}
			
			
		} finally{
			entityManager.close();
		}
	}
}
